// Code generated by MockGen. DO NOT EDIT.
// Source: repository/todo.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "peanut/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTodoRepo is a mock of TodoRepo interface.
type MockTodoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepoMockRecorder
}

// MockTodoRepoMockRecorder is the mock recorder for MockTodoRepo.
type MockTodoRepoMockRecorder struct {
	mock *MockTodoRepo
}

// NewMockTodoRepo creates a new mock instance.
func NewMockTodoRepo(ctrl *gomock.Controller) *MockTodoRepo {
	mock := &MockTodoRepo{ctrl: ctrl}
	mock.recorder = &MockTodoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepo) EXPECT() *MockTodoRepoMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoRepo) CreateTodo(td domain.Todo, userID uint) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", td, userID)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoRepoMockRecorder) CreateTodo(td, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoRepo)(nil).CreateTodo), td, userID)
}

// DeleteTodo mocks base method.
func (m *MockTodoRepo) DeleteTodo(userID, todoID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", userID, todoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepoMockRecorder) DeleteTodo(userID, todoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepo)(nil).DeleteTodo), userID, todoID)
}

// ListTodo mocks base method.
func (m *MockTodoRepo) ListTodo(userID int) ([]domain.ListTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo", userID)
	ret0, _ := ret[0].([]domain.ListTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockTodoRepoMockRecorder) ListTodo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockTodoRepo)(nil).ListTodo), userID)
}

// UpdateTodo mocks base method.
func (m *MockTodoRepo) UpdateTodo(todoID int, td domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", todoID, td)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoRepoMockRecorder) UpdateTodo(todoID, td interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoRepo)(nil).UpdateTodo), todoID, td)
}
